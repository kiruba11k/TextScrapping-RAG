import streamlit as st
import re
import validators
from langchain.vectorstores import FAISS
from langchain_google_genai import GoogleGenerativeAIEmbeddings
from langchain.chains import RetrievalQA
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.document_loaders import WebBaseLoader
from langchain.retrievers import BM25Retriever
import os
from langchain_openai import ChatOpenAI
from langchain_groq import ChatGroq
from langchain_huggingface import HuggingFaceEmbeddings
from langgraph.graph import Graph
from langgraph.checkpoint.memory import MemorySaver

groq_api_key = st.secrets["GROQ_API_KEY"]
os.environ["GROQ_API_KEY"] = groq_api_key

st.set_page_config(page_title="Web Scraper RAG", page_icon="ü§ó", layout="wide")
st.title("Text Scraping RAG System")

url = st.sidebar.text_input("Enter website URL:")
query = st.text_input("Enter your query:")

def is_valid_url(url):
    return validators.url(url)

def scrape_and_process(url):
    if not is_valid_url(url):
        st.warning("üö® ENTER PROPER URL")
        return None, None
    
    loader = WebBaseLoader(web_paths=(url,))
    try:
        docs = loader.load()
    except Exception:
        st.error("‚ùå Invalid URL or issue in scraping data.")
        return None, None
    
    if not docs:
        st.error("üò£ No data retrieved from the URL. Try another website.")
        return None, None
    
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=150)
    texts = text_splitter.split_documents(docs)
    embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/multi-qa-MiniLM-L6-cos-v1")
    
    vector_db = FAISS.from_documents(texts, embeddings)
    vector_db.save_local("faiss_index")
    
    bm25_retriever = BM25Retriever.from_documents(texts)
    st.success("ü§© Data successfully scraped and indexed!")
    return vector_db, bm25_retriever

def retrieve_documents(query, vector_db, bm25_retriever):
    retriever = vector_db.as_retriever()
    retrieved_docs = retriever.get_relevant_documents(query)
    
    if not retrieved_docs:
        retrieved_docs = bm25_retriever.get_relevant_documents(query)
    
    return retrieved_docs

def get_rag_response(query, retrieved_docs):
    if retrieved_docs:
        llm = ChatGroq(model_name="Gemma2-9b-It")
        qa_chain = RetrievalQA.from_chain_type(llm, retriever=retrieved_docs)
        return f"Retrieved from Knowledge Base: {qa_chain.run(query)}"
    return None

def get_llm_response(query):
    llm = ChatGroq(model_name="Gemma2-9b-It")
    return f"Generated by LLM (No relevant documents found): {llm.invoke(query)}"

memory = MemorySaver()
workflow = Graph()
workflow.add_node("scraper", scrape_and_process)
workflow.add_node("retriever", retrieve_documents)
workflow.add_node("rag", get_rag_response)
workflow.add_node("llm", get_llm_response)

workflow.set_entry_point("scraper")
workflow.add_edge("scraper", "retriever")
workflow.add_conditional_edges("retriever", lambda docs: "rag" if docs else "llm")
workflow.add_edge("rag", "output")
workflow.add_edge("llm", "output")

app = workflow.compile(checkpointer=memory)

if st.sidebar.button("Scrape & Process"):
    if url:
        with st.spinner("Scraping and indexing data..."):
            vector_db, bm25_retriever = scrape_and_process(url)
            if vector_db:
                st.session_state["vector_db"] = vector_db
                st.session_state["bm25_retriever"] = bm25_retriever
    else:
        st.error("üò£ Please enter a valid URL.")

if query:
    if "vector_db" in st.session_state:
        with st.spinner("üßê Searching relevant information..."):
            retrieved_docs = retrieve_documents(query, st.session_state["vector_db"], st.session_state["bm25_retriever"])
            response = get_rag_response(query, retrieved_docs) if retrieved_docs else get_llm_response(query)
            
            st.write("**Query:**", query)
            st.write("**Result:**", response)
    else:
        st.error("üëª No indexed data found. Scrape a website first.")

st.sidebar.write("ü´£ Built by [Kirubakaran](https://github.com/kiruba11k)")
