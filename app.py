import streamlit as st
import validators
from langchain.vectorstores import FAISS
from langchain_google_genai import GoogleGenerativeAIEmbeddings
from langchain.chains import RetrievalQA
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.document_loaders import WebBaseLoader
from langchain.retrievers import BM25Retriever
import os
from langchain_openai import ChatOpenAI
from langchain_groq import ChatGroq
from langchain_huggingface import HuggingFaceEmbeddings
from langgraph.graph import Graph
from langgraph.checkpoint.memory import MemorySaver

def is_valid_url(url):
    return validators.url(url)

def scrape_and_process(url):
    if not is_valid_url(url):
        st.warning("üö® ENTER PROPER URL")
        return None, None
    
    loader = WebBaseLoader(web_paths=(url,))
    try:
        docs = loader.load()
    except Exception:
        st.error("‚ùå Invalid URL format. Please enter a proper URL.")
        return None, None
    
    if not docs:
        st.error("üò£ No data retrieved from the URL. Try another website.")
        return None, None

    text_splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=150)
    texts = text_splitter.split_documents(docs)

    embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/multi-qa-MiniLM-L6-cos-v1")
    vector_db = FAISS.from_documents(texts, embeddings)
    vector_db.save_local("faiss_index")

    bm25_retriever = BM25Retriever.from_documents(texts)

    st.session_state["vector_db"] = vector_db
    st.session_state["bm25_retriever"] = bm25_retriever
    st.success("ü§© Data successfully scraped and indexed!")
    
    return vector_db, bm25_retriever

def retrieve_or_fallback(query):
    if "vector_db" not in st.session_state or "bm25_retriever" not in st.session_state:
        return {"response": "No indexed data found. Scrape a website first.", "source": "None"}

    vector_db = st.session_state["vector_db"]
    bm25_retriever = st.session_state["bm25_retriever"]

    retriever = vector_db.as_retriever()
    retrieved_docs = retriever.get_relevant_documents(query)
    
    if not retrieved_docs:
        retrieved_docs = bm25_retriever.get_relevant_documents(query)

    if not retrieved_docs:
        return {"response": None, "source": "LLM"}  # Signal to use LLM fallback
    
    return {"response": retrieved_docs[0].page_content, "source": "RAG"}

def llm_generate(query):
    llm = ChatGroq(model_name="Gemma2-9b-It")
    response = llm.invoke(query)
    return {"response": response, "source": "LLM"}

memory = MemorySaver()
workflow = Graph()
workflow.add_node("scraper", scrape_and_process)
workflow.add_node("retriever", retrieve_or_fallback)
workflow.add_node("llm", llm_generate)

workflow.set_entry_point("scraper")
workflow.add_edge("scraper", "retriever")
workflow.add_conditional_edges("retriever", lambda x: "llm" if x["response"] is None else None)
workflow.add_edge("llm", "retriever")  # Fallback loop

app = workflow.compile(checkpointer=memory)

if st.sidebar.button("Scrape & Process"):
    if url:
        with st.spinner("Scraping and indexing data..."):
            vector_db, bm25_retriever = scrape_and_process(url)
            if vector_db:
                st.session_state["vector_db"] = vector_db
                st.session_state["bm25_retriever"] = bm25_retriever
    else:
        st.error("üò£ Please enter a valid URL.")

if query:
    with st.spinner("üßê Searching relevant information..."):
        retrieved_docs, error = retrieve_docs(query)
        if error:
            st.error(error)
        elif retrieved_docs:
            st.write("**RAG Retrieved Answer:**", retrieved_docs[0].page_content)
        else:
            llm_response = generate_llm_response(query)
            st.write("**Generated by LLM:**", llm_response)

st.sidebar.write("ü´£ Built by [Kirubakaran](https://github.com/kiruba11k)")
